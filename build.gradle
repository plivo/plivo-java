plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'idea'
    id 'eclipse'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

group = 'com.plivo'
version = new File("${projectDir}/src/main/resources/com/plivo/api/version.txt").readLines().get(0)

repositories {
    mavenCentral()
    gradlePluginPortal()
}

java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-XDignore.symbol.file=true"
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    
    testImplementation 'com.squareup.okhttp:mockwebserver:2.7.5'

    implementation 'com.squareup.retrofit2:converter-jackson:2.2.0'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
    implementation 'com.auth0:java-jwt:3.10.2'
}

checkstyle {
    toolVersion = '8.45.1'
    configFile = file("${projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        'checkstyle.cache.file': "${buildDir}/checkstyle.cache"
    ]
    showViolations = true
    sourceSets = [sourceSets.main, sourceSets.test]
    ignoreFailures = false
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    ignoreFailures = false
}

javadoc {
    title = "Plivo Java SDK"
    options.linkSource = true
}

jar {
    manifest {
        attributes(
            "Created-By": 'Plivo',
            'Implementation-Vendor': 'Plivo',
            'Implementation-Title': 'Plivo Java SDK',
            'Implementation-Version': version
        )
    }
}

shadowJar {
    archiveClassifier.set('all')
    archiveBaseName.set("plivo-java-${version}-jar-with-dependencies")
}

// Add fatJar task that depends on shadowJar
task fatJar {
    dependsOn shadowJar
}

nexusStaging {
    numberOfRetries = 60
    delayBetweenRetriesInMillis = 40000
    username = System.getenv("MAVEN_USERNAME") ?: project.findProperty('mavenUserName') ?: ''
    password = System.getenv("MAVEN_PASSWORD") ?: project.findProperty('mavenPassword') ?: ''
}

task createPom {
    doLast {
        def pomFile = file("$buildDir/pom.xml")
        pomFile.parentFile.mkdirs()
        pomFile.createNewFile()
        pomFile.text = """
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>${project.group}</groupId>
    <artifactId>plivo-java</artifactId>
    <version>${project.version}</version>
    <packaging>jar</packaging>
    <name>plivo-java</name>
    <description>A Java SDK to make voice calls &amp; send SMS using Plivo and to generate Plivo XML</description>
    <url>https://github.com/plivo/plivo-java/</url>
    
    <licenses>
        <license>
            <name>The MIT License</name>
            <url>https://github.com/plivo/plivo-java/blob/4.0/LICENSE.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>
    
    <developers>
        <developer>
            <name>The Plivo SDKs Team</name>
            <email>sdks@plivo.com</email>
            <organization>Plivo, Inc.</organization>
            <organizationUrl>https://plivo.com</organizationUrl>
        </developer>
    </developers>
    
    <scm>
        <url>git@github.com:plivo/plivo-java.git</url>
        <connection>scm:git:git@github.com:plivo/plivo-java.git</connection>
        <developerConnection>scm:git:git@github.com:plivo/plivo-java.git</developerConnection>
    </scm>
</project>
"""
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom {
                name = 'plivo-java'
                packaging = 'jar'
                artifactId = 'plivo-java'
                description = 'A Java SDK to make voice calls & send SMS using Plivo and to generate Plivo XML'
                url = 'https://github.com/plivo/plivo-java/'

                scm {
                    connection = 'scm:git:git@github.com:plivo/plivo-java.git'
                    developerConnection = 'scm:git:git@github.com:plivo/plivo-java.git'
                    url = 'git@github.com:plivo/plivo-java.git'
                }

                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://github.com/plivo/plivo-java/blob/4.0/LICENSE.txt'
                    }
                }

                organization {
                    name = 'Plivo'
                    url = 'https://api-reference.plivo.com/latest/net/introduction/overview'
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/plivo/plivo-java/issues'
                }

                developers {
                    developer {
                        name = 'The Plivo SDKs Team'
                        email = 'sdks@plivo.com'
                        organization = 'Plivo, Inc.'
                        organizationUrl = 'https://plivo.com'
                    }
                }
            }
        }
    }
    
    repositories {
        maven {
            def releasesRepoUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            
            credentials {
                username = System.getenv("MAVEN_USERNAME") ?: project.findProperty('mavenUserName') ?: ''
                password = System.getenv("MAVEN_PASSWORD") ?: project.findProperty('mavenPassword') ?: ''
            }
        }
    }
}

signing {
    required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

application {
    mainClass = 'com.plivo.examples.Messages'
}

task upload {
    dependsOn publish
    doLast {
        println "Uploading artifacts completed"
    }
}
